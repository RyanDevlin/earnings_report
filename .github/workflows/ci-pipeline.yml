name: ci-pipeline
on:
  push:
    branches:
      - main
  pull_request:
jobs:

  lint:
    name: lint
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.29

  compile-arm: 
    name: Compile for arm architecture
    env:
      OSTARGET: "linux"
      ARCHTARGET: "arm"
    strategy:
      matrix:
        # If we want to build with more versions we can add them here
        go-version: [1.15.6]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Go environment
        uses: actions/setup-go@v2
        with:
          # The Go version to download (if necessary) and use. Supports semver spec and ranges.
          go-version: ${{ matrix.go-version }}
        # This builds to the architecture specified in the job env vars
      - name: Run go build
        run: GOOS=$OSTARGET GOARCH=$ARCHTARGET go build -o earningsbot cmd/runearningsreport.go
      - name: Upload build binary artifact
        uses: actions/upload-artifact@v2
        with:
          name: earningsbot-linux-arm
          path: earningsbot

  compile-macOS: 
    name: Compile for macOS architecture
    env:
      OSTARGET: "darwin"
      ARCHTARGET: "amd64"
    strategy:
      matrix:
        # If we want to build with more versions we can add them here
        go-version: [1.15.6]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Go environment
        uses: actions/setup-go@v2
        with:
          # The Go version to download (if necessary) and use. Supports semver spec and ranges.
          go-version: ${{ matrix.go-version }}
        # This builds to the architecture specified in the job env vars
      - name: Run go build
        run: GOOS=$OSTARGET GOARCH=$ARCHTARGET go build -o earningsbot cmd/runearningsreport.go
      - name: Upload build binary artifact
        uses: actions/upload-artifact@v2
        with:
          name: earningsbot-darwin-amd64
          path: earningsbot

  build-image:
    name: Build container image
    runs-on: ubuntu-latest
    # This can't be run without first linting and compiling the code
    needs: [lint, compile-arm]
    env:
      roottag: fromJSON('["downstream", "upstream"]')[contains(github.repository_owner, 'tkobil')]
      arch: arm-v1.0
      tag: ${{ env.roottag }}-${{ env.arch }}
    steps:
    - uses: actions/checkout@v2
    - name: Download compiled binary
      uses: actions/download-artifact@v2
      with:
        name: earningsbot-linux-arm
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASS }}
    - name: Set Upstream tag
      env:
        tag: upstream-${{ env.basetag }}
      run: echo ${{ env.tag }}
      if: ${{ contains(github.repository_owner, 'tkobil') }}
    - name: Set Downstream tag
      env:
        tag: downstream-${{ env.basetag }}
      run: echo ${{ env.tag }}
      if: ${{ contains(github.repository_owner, 'RyanDevlin') }}
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/arm/v7 # Can add more platforms here
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USER }}/earningsbot:${{ env.tag }}
